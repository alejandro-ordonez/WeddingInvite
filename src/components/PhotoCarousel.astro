---
interface Photo {
	src?: string;
	alt?: string;
}

interface Props {
	photos?: Photo[];
	title?: string;
}

const {
	photos = [
		{ alt: "Photo 1" },
		{ alt: "Photo 2" },
		{ alt: "Photo 3" },
		{ alt: "Photo 4" },
		{ alt: "Photo 5" },
		{ alt: "Photo 6" }
	],
	title = "Our Journey Together"
} = Astro.props;
---

<div class="photo-carousel-section">
	<div class="divider-section">
		<span class="divider-line"></span>
		<span class="divider-icon">‚ùã</span>
		<span class="divider-line"></span>
	</div>

	<div class="gallery-header">
		<svg viewBox="0 0 100 30" xmlns="http://www.w3.org/2000/svg">
			<path d="M10,15 Q30,10 50,15 Q70,20 90,15" stroke="#5F7161" stroke-width="1.5" fill="none" opacity="0.6"/>
			<ellipse cx="30" cy="12" rx="4" ry="6" fill="#9CAF88" opacity="0.8" transform="rotate(-30 30 12)"/>
			<ellipse cx="50" cy="15" rx="5" ry="7" fill="#7A9B76" opacity="0.8"/>
			<ellipse cx="70" cy="18" rx="4" ry="6" fill="#9CAF88" opacity="0.8" transform="rotate(30 70 18)"/>
		</svg>
		<h3 class="gallery-title">{title}</h3>
	</div>

	<div class="carousel-container">
		<button class="carousel-btn prev-btn" aria-label="Previous photo">
			<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
				<polyline points="15 18 9 12 15 6"></polyline>
			</svg>
		</button>

		<div class="carousel-track-container">
			<div class="carousel-track">
				{photos.map((photo, index) => (
					<div class="carousel-slide" data-index={index}>
						<div class="photo-frame">
							{photo.src ? (
								<img src={photo.src} alt={photo.alt || `Photo ${index + 1}`} class="photo-image" />
							) : (
								<div class="photo-placeholder">
									<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
										<rect width="100" height="100" fill="#F5E6D3"/>
										{index % 3 === 0 && (
											<>
												<circle cx="50" cy="40" r="15" fill="#9CAF88" opacity="0.3"/>
												<path d="M30,60 L50,45 L70,60 L90,45" stroke="#5F7161" stroke-width="2" fill="none" opacity="0.3"/>
											</>
										)}
										{index % 3 === 1 && (
											<>
												<circle cx="35" cy="35" r="12" fill="#FFB300" opacity="0.3"/>
												<circle cx="65" cy="35" r="12" fill="#FFB300" opacity="0.3"/>
												<path d="M20,70 Q50,85 80,70" stroke="#40B5AD" stroke-width="2" fill="none" opacity="0.3"/>
											</>
										)}
										{index % 3 === 2 && (
											<>
												<ellipse cx="50" cy="50" rx="25" ry="35" fill="#9CAF88" opacity="0.3"/>
												<path d="M40,80 Q50,60 60,80" stroke="#5F7161" stroke-width="2" fill="none" opacity="0.3"/>
											</>
										)}
									</svg>
								</div>
							)}
						</div>
						{/* Decorative accents */}
						{index % 2 === 0 && (
							<div class="vine-accent">
								<svg viewBox="0 0 50 50" xmlns="http://www.w3.org/2000/svg">
									<path d="M5,5 Q15,20 25,30" stroke="#5F7161" stroke-width="1" fill="none" opacity="0.6"/>
									<ellipse cx="15" cy="18" rx="3" ry="5" fill="#9CAF88" opacity="0.7" transform="rotate(-20 15 18)"/>
								</svg>
							</div>
						)}
						{index % 3 === 1 && (
							<div class="sunflower-mini">
								<svg viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
									<ellipse cx="20" cy="12" rx="4" ry="8" fill="#FFB300" transform="rotate(0 20 20)"/>
									<ellipse cx="20" cy="12" rx="4" ry="8" fill="#FFC933" transform="rotate(60 20 20)"/>
									<ellipse cx="20" cy="12" rx="4" ry="8" fill="#FFB300" transform="rotate(120 20 20)"/>
									<ellipse cx="20" cy="12" rx="4" ry="8" fill="#FFC933" transform="rotate(180 20 20)"/>
									<ellipse cx="20" cy="12" rx="4" ry="8" fill="#FFB300" transform="rotate(240 20 20)"/>
									<ellipse cx="20" cy="12" rx="4" ry="8" fill="#FFC933" transform="rotate(300 20 20)"/>
									<circle cx="20" cy="20" r="6" fill="#6B4423"/>
								</svg>
							</div>
						)}
					</div>
				))}
			</div>
		</div>

		<button class="carousel-btn next-btn" aria-label="Next photo">
			<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
				<polyline points="9 18 15 12 9 6"></polyline>
			</svg>
		</button>
	</div>

	<div class="carousel-indicators">
		{photos.map((_, index) => (
			<button class={`indicator ${index === 0 ? 'active' : ''}`} data-index={index} aria-label={`Go to photo ${index + 1}`}></button>
		))}
	</div>
</div>

<script>
	class PhotoCarousel {
		private track: HTMLElement | null;
		private slides: NodeListOf<HTMLElement>;
		private prevBtn: HTMLButtonElement | null;
		private nextBtn: HTMLButtonElement | null;
		private indicators: NodeListOf<HTMLButtonElement>;
		private currentIndex: number = 0;

		constructor() {
			this.track = document.querySelector('.carousel-track');
			this.slides = document.querySelectorAll('.carousel-slide');
			this.prevBtn = document.querySelector('.prev-btn');
			this.nextBtn = document.querySelector('.next-btn');
			this.indicators = document.querySelectorAll('.indicator');

			this.init();
		}

		init() {
			if (!this.track || this.slides.length === 0) return;

			this.prevBtn?.addEventListener('click', () => this.prev());
			this.nextBtn?.addEventListener('click', () => this.next());

			this.indicators.forEach((indicator, index) => {
				indicator.addEventListener('click', () => this.goToSlide(index));
			});

			// Touch/swipe support
			let startX = 0;
			let currentX = 0;
			let isDragging = false;

			this.track.addEventListener('touchstart', (e) => {
				startX = e.touches[0].clientX;
				isDragging = true;
			});

			this.track.addEventListener('touchmove', (e) => {
				if (!isDragging) return;
				currentX = e.touches[0].clientX;
			});

			this.track.addEventListener('touchend', () => {
				if (!isDragging) return;
				const diff = startX - currentX;
				if (Math.abs(diff) > 50) {
					if (diff > 0) {
						this.next();
					} else {
						this.prev();
					}
				}
				isDragging = false;
			});

			// Keyboard navigation
			document.addEventListener('keydown', (e) => {
				if (e.key === 'ArrowLeft') this.prev();
				if (e.key === 'ArrowRight') this.next();
			});
		}

		prev() {
			this.currentIndex = this.currentIndex > 0 ? this.currentIndex - 1 : this.slides.length - 1;
			this.updateCarousel();
		}

		next() {
			this.currentIndex = this.currentIndex < this.slides.length - 1 ? this.currentIndex + 1 : 0;
			this.updateCarousel();
		}

		goToSlide(index: number) {
			this.currentIndex = index;
			this.updateCarousel();
		}

		updateCarousel() {
			if (!this.track) return;

			const slideWidth = this.slides[0].offsetWidth;
			const gap = 32; // 2rem in pixels
			this.track.style.transform = `translateX(-${this.currentIndex * (slideWidth + gap)}px)`;

			this.indicators.forEach((indicator, index) => {
				indicator.classList.toggle('active', index === this.currentIndex);
			});
		}
	}

	// Initialize carousel when DOM is ready
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', () => {
			new PhotoCarousel();
		});
	} else {
		new PhotoCarousel();
	}
</script>

<style>
	.photo-carousel-section {
		position: relative;
		width: 100%;
		margin-top: 2rem;
		padding: 0;
	}

	.divider-section {
		display: flex;
		align-items: center;
		justify-content: center;
		margin: 2rem 0 2.5rem;
		gap: 1rem;
	}

	.divider-line {
		height: 1px;
		width: 80px;
		background: linear-gradient(to right, transparent, var(--sage-green), transparent);
	}

	.divider-icon {
		color: var(--sunflower-yellow);
		font-size: 1.2rem;
	}

	.gallery-header {
		text-align: center;
		margin-bottom: 2rem;
	}

	.gallery-header svg {
		width: 120px;
		height: auto;
		margin-bottom: 0.8rem;
	}

	.gallery-title {
		font-family: 'Cormorant Garamond', serif;
		font-size: 2.25rem;
		font-weight: 500;
		color: #6B5A45;
		margin: 0;
		letter-spacing: 1px;
	}

	.carousel-container {
		position: relative;
		display: flex;
		align-items: center;
		gap: 1rem;
		margin-bottom: 2rem;
	}

	.carousel-track-container {
		flex: 1;
		overflow: hidden;
		border-radius: 20px;
	}

	.carousel-track {
		display: flex;
		gap: 2rem;
		transition: transform 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
	}

	.carousel-slide {
		min-width: 100%;
		position: relative;
	}

	.photo-frame {
		position: relative;
		aspect-ratio: 4/3;
		border-radius: 15px;
		padding: 12px;
		background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(245, 230, 211, 0.85));
		box-shadow:
			0 8px 30px rgba(0, 0, 0, 0.12),
			0 2px 8px rgba(0, 0, 0, 0.08);
		overflow: hidden;
		transition: transform 0.3s ease;
	}

	.carousel-slide:hover .photo-frame {
		transform: scale(1.02);
	}

	.photo-image {
		width: 100%;
		height: 100%;
		object-fit: cover;
		border-radius: 8px;
	}

	.photo-placeholder {
		width: 100%;
		height: 100%;
		border-radius: 8px;
		overflow: hidden;
		background: linear-gradient(135deg, var(--cream), var(--warm-beige));
		display: flex;
		align-items: center;
		justify-content: center;
		position: relative;
	}

	.photo-placeholder::after {
		content: 'Add Photo';
		position: absolute;
		font-family: 'Cormorant Garamond', serif;
		font-size: 1.4rem;
		color: #6B5A45;
		opacity: 0.6;
		letter-spacing: 1px;
		font-weight: 500;
	}

	.photo-placeholder svg {
		width: 100%;
		height: 100%;
	}

	.carousel-btn {
		background: rgba(255, 255, 255, 0.95);
		border: 2px solid var(--sage-green);
		border-radius: 50%;
		width: 50px;
		height: 50px;
		display: flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;
		transition: all 0.3s ease;
		color: var(--forest-green);
		flex-shrink: 0;
	}

	.carousel-btn:hover {
		background: var(--sage-green);
		color: white;
		transform: scale(1.1);
		box-shadow: 0 4px 15px rgba(95, 113, 97, 0.3);
	}

	.carousel-btn svg {
		width: 24px;
		height: 24px;
	}

	.carousel-indicators {
		display: flex;
		justify-content: center;
		gap: 0.8rem;
		margin-top: 2rem;
	}

	.indicator {
		width: 12px;
		height: 12px;
		border-radius: 50%;
		border: 2px solid var(--sage-green);
		background: transparent;
		cursor: pointer;
		transition: all 0.3s ease;
	}

	.indicator.active,
	.indicator:hover {
		background: var(--turquoise);
		border-color: var(--turquoise);
		transform: scale(1.3);
	}

	.vine-accent {
		position: absolute;
		top: -15px;
		left: -15px;
		width: 60px;
		height: 60px;
		pointer-events: none;
		opacity: 0.8;
	}

	.sunflower-mini {
		position: absolute;
		bottom: -10px;
		right: -10px;
		width: 50px;
		height: 50px;
		pointer-events: none;
		opacity: 0.8;
		animation: gentleRotate 20s ease-in-out infinite;
	}

	@keyframes gentleRotate {
		0%, 100% {
			transform: rotate(0deg);
		}
		50% {
			transform: rotate(5deg);
		}
	}

	@media (max-width: 768px) {
		.gallery-title {
			font-size: 1.6rem;
		}

		.divider-line {
			width: 60px;
		}

		.carousel-btn {
			width: 40px;
			height: 40px;
		}

		.carousel-btn svg {
			width: 20px;
			height: 20px;
		}
	}

	@media (max-width: 480px) {
		.gallery-title {
			font-size: 1.3rem;
		}

		.divider-line {
			width: 40px;
		}

		.carousel-container {
			gap: 0.5rem;
		}

		.carousel-btn {
			width: 35px;
			height: 35px;
		}

		.vine-accent,
		.sunflower-mini {
			display: none;
		}
	}
</style>
